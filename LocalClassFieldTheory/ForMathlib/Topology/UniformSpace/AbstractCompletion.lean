import Topology.UniformSpace.AbstractCompletion

#align_import for_mathlib.topology.uniform_space.abstract_completion

/-! 
# Abstract completion
Let `f : Œ± ‚Üí Œ≤` be a continuous function between a uniform space `Œ±` and a regular topological 
space `Œ≤`, and let `pkg, pkg'` be two abstract completions of `Œ±`. The main result is that 
if for every point `a : pkg` the filter `f.map (coe‚Åª¬π (ùìù a))` obtained by pushing forward with `f`
the preimage in `Œ±` of `ùìù a` tends to `ùìù (f.extend a : Œ≤)`, then the comparison map
between `pkg` and `pkg'` composed with the extension of `f` to `pkg`` coincides with the
extension of `f` to `pkg'` -/


namespace AbstractCompletion

open scoped Topology

variable {Œ± Œ≤ : Type _} [UniformSpace Œ±] [TopologicalSpace Œ≤]

variable (pkg : AbstractCompletion Œ±) (pkg' : AbstractCompletion Œ±)

/-- The topological space underlying a uniform space -/
def topPkg : TopologicalSpace pkg.Space :=
  pkg.uniformStruct.toTopologicalSpace

attribute [local instance] top_pkg

theorem extend_compare_extend [T3Space Œ≤] (f : Œ± ‚Üí Œ≤) (cont_f : Continuous f)
    (hf :
      ‚àÄ a : pkg.Space,
        Filter.Tendsto f (Filter.comap pkg.coe (ùìù a)) (ùìù ((pkg.DenseInducing.extend f) a))) :
    pkg.DenseInducing.extend f ‚àò pkg'.compare pkg = pkg'.DenseInducing.extend f :=
  by
  have : ‚àÄ x : Œ±, (pkg.dense_inducing.extend f ‚àò pkg'.compare pkg) (pkg'.coe x) = f x :=
    by
    intro a
    rw [Function.comp_apply, compare_coe]
    apply DenseInducing.extend_eq _ cont_f
  refine' (DenseInducing.extend_unique (AbstractCompletion.denseInducing _) this _).symm
  letI := pkg'.uniform_struct
  letI := pkg.uniform_struct
  refine' Continuous.comp _ (uniform_continuous_compare pkg' pkg).Continuous
  apply DenseInducing.continuous_extend
  use fun a => ‚ü®(pkg.dense_inducing.extend f) a, hf a‚ü©

end AbstractCompletion

