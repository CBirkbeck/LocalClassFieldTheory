import LocalClassFieldTheory.DiscreteValuationRing.Complete
import Mathlib.NumberTheory.Padics.PadicIntegers
import Mathlib.RingTheory.DedekindDomain.AdicValuation
import LocalClassFieldTheory.ForMathlib.NumberTheory.Padics.PadicIntegers
import LocalClassFieldTheory.ForMathlib.RingTheory.DedekindDomain.Ideal
import LocalClassFieldTheory.FromMathlib.SpecificLimits

#align_import padic_compare

/-!

## Main definitions
* `int.p_height_one_ideal` the ideal `pℤ` as term of the height_one_spectrum of `ℤ`.

### The field `Q_p`
* `Q_p` is the adic completion of ℚ defined as the uniform completion of the valued field
  `ℚ` endowed with its `p`-adic valued structure.
* `padic_pkg'` is the abstract completion of `ℚ` whose underlying space is `Q_p`.
* `padic_pkg` is the abstract completion of `ℚ` (endowed with the uniformity coming from the
  `p`-adic valued structure) whose underlying space is "usual" `ℚ_[p]` defined in terms of the
  `p`-adic metric. In particular, terms of `padic_pkg'.space` are limits of abstract Cauchy filters
    as in `topology.uniform_space.completion` while terms of `padic_pkg.space = ℚ_[p]` are limits
    of Cauchy sequences.
* `padic_valued` The valued structure on `ℚ` induced from the `p`-adic valuation.
* `compare` is the uniform equivalence `Q_p p ≃ᵤ ℚ_[p]` among the underlying spaces of the two
  abstract completions `padic_pkg'` and `padic_pkg`.
* `padic_equiv : (Q_p p) ≃+* ℚ_[p] :=` The uniform equivalence `compare` as a ring equivalence.

### The integers
* `Z_p` is the unit ball inside `Q_p`.
* `padic'_int.height_one_ideal` The maximal ideal of `Z_p p` as term of the height-one spectrum.
* `padic_int.valuation_subring` Is `ℤ_[p]` seen as valuation_subring if `ℚ_[p]`.
* `comap_Zp` Is the valuation subring of `ℚ_[p]` that is the image via the isomorphism
  `padic_equiv` of `Z_p`.
* `padic_int_ring_equiv` Is the ring equivalence between `Z_p p` and `ℤ_[p]`.
* `residue_field` Is the ring equivalence between the residue field of `Z_p p` and `ℤ/pℤ`.


## Main results
* `padic_valued_valuation_p` and `padic'.valuation_p` show that the valuation of `p : ℚ` is the
  same, namely `(-1 : ℤₘ₀), both when coerced to `ℚ_[p]` and to `Q_p p`.
* `valuation_subrings_eq` The equality (as valuation subrings of `ℚ_[p]`) between
  `padic_int.valuation_subring` and `comap_Zp`.
* `padic'_int.height_one_ideal_is_principal` is the proof that the maximal ideal of `Z_p` is
  the ideal generated by `p`.


## Implementation details
* In order to put a valued instance on `ℚ` coming from the `p`-adic valuation on `ℤ` we have to
  locally remove several instances on it, notably the metric one, the normed one, the densely
  normed field one, the division ring one, the normed additive commutative group one. With these in
  force, there would be clashes between different uniform structures.
* To create the abstract completion `padic_pkg` we regard `ℚ_[p]` we need a coercion from `ℚ` to
  its completion `ℚ_[p]` that is not definitionally equal to the coercion from `ℚ` to any field of
  characteristic zero. In particular, we need to manually upgrade this coercion to a ring map in the
  `definition coe_ring_hom : ℚ →+* ℚ_[p]`.-/


noncomputable section

open IsDedekindDomain IsDedekindDomain.HeightOneSpectrum

/-- The ideal `pℤ` as term of the height_one_spectrum of `ℤ`.-/
def Int.pHeightOneIdeal (p : outParam ℕ) [hp : Fact p.Prime] : HeightOneSpectrum ℤ
    where
  asIdeal := Ideal.span {(p : ℤ)}
  IsPrime := by
    rw [Ideal.span_singleton_prime]
    exacts [nat.prime_iff_prime_int.mp hp.1, nat.cast_ne_zero.mpr hp.1.NeZero]
  ne_bot := by
    simp only [Ne.def, Ideal.span_singleton_eq_bot, Nat.cast_eq_zero]
    exact hp.1.NeZero

variable (p : outParam ℕ) [Fact p.Prime]

namespace Padic'

open Valuation Int

open scoped DiscreteValuation

attribute [-instance] Rat.metricSpace Rat.normedField Rat.denselyNormedField Rat.divisionRing
  Rat.normedAddCommGroup

instance : SeparatedSpace ℚ_[p] :=
  MetricSpace.to_separated

/-- The valued structure on `ℚ` induced by the `p`-adic valuation. -/
def padicValued : Valued ℚ ℤₘ₀ :=
  (pHeightOneIdeal p).adicValued

attribute [local instance] padic_valued

/-- The adic completion of ℚ defined as the uniform completion of the valued field
`ℚ` endowed with its `p`-adic valued structure.-/
@[reducible]
def QP : Type _ :=
  adicCompletion ℚ (pHeightOneIdeal p)

instance : IsDiscrete (@Valued.v (QP p) _ ℤₘ₀ _ _) :=
  Completion.isDiscrete _ _ _

instance : NormedField (QP p) :=
  RankOneValuation.ValuedField.toNormedField (QP p) ℤₘ₀

/-- The abstract completion of `ℚ` whose underlying space is `Q_p`. -/
def padicPkg' : AbstractCompletion ℚ where
  Space := QP p
  coe := coe
  /- This `coe` is not the coercion from `ℚ` to every field of characteristic zero, but rather the
  coercion from a space to its uniform completion-/
  uniformStruct := inferInstance
  complete := inferInstance
  separation := inferInstance
  UniformInducing := (UniformSpace.Completion.uniformEmbedding_coe ℚ).1
  dense := UniformSpace.Completion.denseRange_coe

end Padic'

namespace PadicComparison

open NNReal Polynomial Int NormalizationMonoid Multiplicative Padic Valuation

open scoped Classical NNReal DiscreteValuation

attribute [-instance] Rat.metricSpace Rat.normedField Rat.denselyNormedField Rat.divisionRing
  Rat.normedAddCommGroup

/-- This is the valued structure on `ℚ` induced from the `p`-adic valuation. -/
def padicValued : Valued ℚ ℤₘ₀ :=
  (pHeightOneIdeal p).adicValued

instance : SeparatedSpace ℚ_[p] :=
  MetricSpace.to_separated

attribute [local instance] padic_valued

section Valuation

theorem padicNorm_of_int_eq_val_norm (x : ℤ) :
    (padicNorm p x : ℝ) = withZeroMultIntToNnreal (NeZero.ne p) (Valued.v (x : ℚ)) :=
  by
  by_cases hx : x = 0
  · simp only [hx, padicNorm.zero, algebraMap.coe_zero, _root_.map_zero]
  · have hx0 : ¬(x : ℚ) = 0 := cast_ne_zero.mpr hx
    have hv0 : Valued.v (x : ℚ) ≠ (0 : ℤₘ₀) := by rw [Ne.def, zero_iff]; exact hx0
    have heq :
      Multiplicative.ofAdd
          (-(Associates.mk (p_height_one_ideal p).asIdeal).count
                (Associates.mk (Ideal.span {x} : Ideal ℤ)).factors :
            ℤ) =
        WithZero.unzero hv0 :=
      by
      erw [← WithZero.coe_inj, ← int_valuation_def_if_neg _ hx, WithZero.coe_unzero,
        valuation_of_algebra_map]
      rfl
    have hx' : (Ideal.span {x} : Ideal ℤ) ≠ 0 := by
      rwa [Ideal.zero_eq_bot, Ne.def, Ideal.span_singleton_eq_bot]
    have hp : Prime (p : ℤ) := nat.prime_iff_prime_int.mp _inst_1.1
    have hp' : (Ideal.span {(p : ℤ)} : Ideal ℤ).IsPrime := by
      rwa [Ideal.span_singleton_prime (NeZero.ne (p : ℤ))]
    have hpne : (Ideal.span {(p : ℤ)} : Ideal ℤ) ≠ ⊥ := by rw [Ne.def, Ideal.span_singleton_eq_bot];
      exact NeZero.ne (p : ℤ)
    simp only [padicNorm.eq_zpow_of_nonzero hx0, withZeroMultIntToNnreal,
      withZeroMultIntToNnrealDef, zero_iff, Rat.cast_zpow, Rat.cast_coe_nat,
      MonoidWithZeroHom.coe_mk, dif_neg hx0, coe_zpow, NNReal.coe_nat_cast]
    apply congr_arg
    rw [← HEq, padicValRat.of_int_multiplicity (Nat.Prime.ne_one _inst_1.1) hx, toAdd_ofAdd,
      neg_inj, Nat.cast_inj, ← PartENat.natCast_inj, PartENat.natCast_get,
      UniqueFactorizationMonoid.multiplicity_eq_count_normalizedFactors hp.irreducible hx,
      Int.normalize_coe_nat, PartENat.natCast_inj,
      count_normalized_factors_eq_count_normalized_factors_span hx (NeZero.ne p) rfl hp,
      NormalizationMonoid.count_normalizedFactors_eq_associates_count _ _ _ hx' hp' hpne]
    rfl

theorem padicNorm_eq_val_norm (z : ℚ) :
    (padicNorm p z : ℝ) = withZeroMultIntToNnreal (NeZero.ne p) (Valued.v z) :=
  by
  by_cases hz : z = 0
  · simp only [hz, padicNorm.zero, algebraMap.coe_zero, _root_.map_zero]
  · obtain ⟨x, y, hxy⟩ := IsLocalization.mk'_surjective (nonZeroDivisors ℤ) z
    have hz : IsLocalization.mk' ℚ x y = x / y := by
      simp only [IsFractionRing.mk'_eq_div, eq_intCast, _root_.coe_coe]
    erw [← hxy, valuation_of_mk', hz, padicNorm.div, _root_.coe_coe, Rat.cast_div, map_div₀,
      Nonneg.coe_div]
    apply congr_arg₂ <;> · convert padic_norm_of_int_eq_val_norm p _; erw [valuation_of_algebra_map]

end Valuation

section AbstractCompletion

theorem uniformInducing_coe : UniformInducing (coe : ℚ → ℚ_[p]) :=
  by
  have hp_one : (1 : ℝ≥0) < p := nat.one_lt_cast.mpr (Nat.Prime.one_lt (Fact.out _))
  apply UniformInducing.mk'
  simp_rw [@Metric.mem_uniformity_dist ℚ_[p] _ _]
  refine' fun S => ⟨fun hS => _, _⟩
  · obtain ⟨m, ⟨-, hM_sub⟩⟩ := (Valued.hasBasis_uniformity ℚ ℤₘ₀).mem_iff.mp hS
    set M := (withZeroMultIntToNnreal (NeZero.ne p) m.1).1 with hM
    refine' ⟨{p : ℚ_[p] × ℚ_[p] | dist p.1 p.2 < M}, ⟨⟨M, ⟨_, fun a b h => h⟩⟩, fun x y h => _⟩⟩
    · exact withZeroMultIntToNnreal_pos _ (is_unit_iff_ne_zero.mp (Units.isUnit m))
    · apply hM_sub
      simp only [Set.mem_setOf_eq, dist] at h ⊢
      rwa [← Padic.coe_sub, padicNormE.eq_padic_norm', padic_norm_eq_val_norm, hM, Units.val_eq_coe,
        val_eq_coe, NNReal.coe_lt_coe, (withZeroMultIntToNnreal_strictMono hp_one).lt_iff_lt, ←
        neg_sub, Valuation.map_neg] at h
  · rw [(Valued.hasBasis_uniformity ℚ ℤₘ₀).mem_iff]
    rintro ⟨T, ⟨ε, ⟨hε, H⟩⟩, h⟩
    obtain ⟨M, hM⟩ := Real.exists_strictMono_lt (withZeroMultIntToNnreal_strictMono hp_one) hε
    refine' ⟨M, by triv, fun q hq => _⟩
    simp only [Set.mem_setOf_eq, dist] at H hq
    have : (↑q.fst, ↑q.snd) ∈ T := by
      apply H
      rw [← Padic.coe_sub, padicNormE.eq_padic_norm', padic_norm_eq_val_norm, ← neg_sub,
        Valuation.map_neg]
      exact
        (nnreal.coe_lt_coe.mpr ((withZeroMultIntToNnreal_strictMono hp_one).lt_iff_lt.mpr hq)).trans
          hM
    specialize h q.1 q.2 this
    rwa [Prod.mk.eta] at h

theorem dense_coe : DenseRange (coe : ℚ → ℚ_[p]) :=
  Metric.denseRange_iff.mpr (Padic.rat_dense p)

/-- The abstract completion of `ℚ` (endowed with the uniformity coming from the `p`-adic valued
  structure) whose underlying space is `ℚ_[p]`-/
def padicPkg : AbstractCompletion ℚ where
  Space := ℚ_[p]
  coe := coe
  uniformStruct := inferInstance
  complete := inferInstance
  separation := inferInstance
  UniformInducing := uniformInducing_coe p
  dense := dense_coe p

/-- The coercion from the uniform space `ℚ` to its uniform completion `ℚ_[p]` as a ring
  homomorphims. Beware that this is not the coercion from `ℚ` to `ℚ_[p]` induced from the structure
  of characteristic-zero field on `ℚ_[p]`. -/
def coeRingHom : ℚ →+* ℚ_[p] where
  toFun := (padicPkg p).2
  map_one' := Rat.cast_one
  map_mul' := Rat.cast_mul
  map_zero' := Rat.cast_zero
  map_add' := Rat.cast_add

end AbstractCompletion

open Padic'

section Comparison

/-- The main result is the uniform equivalence from `Q_p p` and `ℚ_[p]`-/
def compare : QP p ≃ᵤ ℚ_[p] :=
  AbstractCompletion.compareEquiv (padicPkg' p) (padicPkg p)

theorem uniformContinuous_coe : UniformContinuous (coe : ℚ → ℚ_[p]) :=
  (uniformInducing_iff'.1 (uniformInducing_coe p)).1

/-- The upgrade of the comparison as a ring homomorphism -/
def extensionAsRingHom : QP p →+* ℚ_[p] :=
  UniformSpace.Completion.extensionHom (coeRingHom p) (uniformContinuous_coe p).Continuous

@[simp]
theorem extensionAsRingHom_toFun :
    (extensionAsRingHom p).toFun = UniformSpace.Completion.extension (coe : ℚ → ℚ_[p]) :=
  rfl

theorem extension_eq_compare : (extensionAsRingHom p).toFun = (compare p).toFun :=
  by
  simp only [extension_as_ring_hom_to_fun, Equiv.toFun_as_coe, UniformEquiv.coe_toEquiv]
  apply
    UniformSpace.Completion.extension_unique (uniform_continuous_coe p)
      ((padic_pkg' p).uniformContinuous_compareEquiv (padic_pkg p))
  intro a
  have : (padic_pkg p).coe a = (↑a : ℚ_[p]) := rfl
  rw [← this, ← AbstractCompletion.compare_coe]
  rfl

/-- The uniform equivalence `compare` as a ring equivalence -/
def padicEquiv : QP p ≃+* ℚ_[p] :=
  {
    compare
      p with
    map_mul' := by rw [← extension_eq_compare p]; use(extension_as_ring_hom p).map_mul'
    map_add' := by rw [← extension_eq_compare p]; exact (extension_as_ring_hom p).map_add' }

instance : CharZero (QP p) :=
  (padicEquiv p).toRingHom.CharZero

instance : Algebra ℚ_[p] (QP p) :=
  RingHom.toAlgebra (PadicComparison.padicEquiv p).symm

instance : IsScalarTower ℚ ℚ_[p] (QP p)
    where smul_assoc r x y :=
    by
    simp only [Algebra.smul_def, eq_ratCast, _root_.map_mul, map_ratCast, mul_assoc]
    rfl

theorem Padic'.coe_eq (x : ℚ) : (x : QP p) = ((padicPkg' p).coe x : (padicPkg' p).Space) :=
  by
  have hp : (x : Q_p p) = (padic_pkg p).compare (padic_pkg' p) (x : ℚ_[p]) :=
    by
    have h : (padic_pkg p).compare (padic_pkg' p) (x : ℚ_[p]) = algebraMap ℚ_[p] (Q_p p) x := rfl
    rw [h, map_ratCast]
  rw [← AbstractCompletion.compare_coe (padic_pkg p) (padic_pkg' p), hp]
  rfl

theorem padicValued_valuation_p : @Valued.v ℚ _ ℤₘ₀ _ (padicValued p) (p : ℚ) = ofAdd (-1 : ℤ) :=
  by
  have hp : (p : ℚ) = algebraMap ℤ ℚ (p : ℤ) := rfl
  rw [adic_valued_apply, hp, valuation_of_algebra_map, int_valuation_apply,
    int_valuation_def_if_neg (p_height_one_ideal p)
      (nat.cast_ne_zero.mpr (Nat.Prime.ne_zero _inst_1.1))]
  congr
  apply Associates.count_self
  rw [Associates.irreducible_mk]
  apply Prime.irreducible
  exact
    Ideal.prime_of_isPrime
      (ideal.span_singleton_eq_bot.mp.mt (nat.cast_ne_zero.mpr (Nat.Prime.ne_zero _inst_1.1)))
      (Ideal.IsMaximal.isPrime' (p_height_one_ideal p).asIdeal)

theorem Padic'.valuation_p : Valued.v (p : QP p) = ofAdd (-1 : ℤ) :=
  by
  letI : Valued ℚ ℤₘ₀ := padic_valued p
  have hp : (p : Q_p p) = ((coe : ℚ → Q_p p) p : Q_p p) :=
    by
    have : ∀ x : ℚ, (coe : ℚ → Q_p p) x = (x : Q_p p) := by intro x; rw [padic'.coe_eq]; rfl
    rw [this]; simp only [Rat.cast_coe_nat]
  rw [hp, Valued.valuedCompletion_apply (p : ℚ), padic_valued_valuation_p p]

end Comparison

section ZP

/-- The unit ball in `Q_p` -/
@[reducible]
def zP :=
  (@Valued.v (QP p) _ ℤₘ₀ _ _).ValuationSubring

theorem exists_mem_le_one_of_lt_one {x : QP p} (hx : Valued.v x ≤ (1 : ℤₘ₀)) :
    ∃ y : zP p, (y : QP p) = x ∧ Valued.v (y : QP p) = Valued.v x :=
  by
  have hv := valued.v.is_equiv_valuation_valuation_subring
  have := ValuationSubring.mem_of_valuation_le_one (Z_p p) x _
  use⟨x, this⟩
  simp only [SetLike.coe_mk, eq_self_iff_true, and_self_iff]
  exact ((Valuation.isEquiv_iff_val_le_one _ _).mp hv).mp hx

theorem exists_mem_lt_one_of_lt_one {x : QP p} (hx : Valued.v x < (1 : ℤₘ₀)) :
    ∃ y : zP p, (y : QP p) = x ∧ Valued.v (y : QP p) = Valued.v x :=
  by
  have hv := valued.v.is_equiv_valuation_valuation_subring
  have := ValuationSubring.mem_of_valuation_le_one (Z_p p) x (le_of_lt _)
  use⟨x, this⟩
  simp only [SetLike.coe_mk, eq_self_iff_true, and_self_iff]
  exact ((Valuation.isEquiv_iff_val_lt_one _ _).mp hv).mp hx

instance : CharZero (zP p)
    where cast_injective m n h :=
    by
    simp only [Subtype.ext_iff, Subring.coe_natCast, Nat.cast_inj] at h
    exact h

/-- The maximal ideal of `Z_p p` as an element of the height-one spectrum -/
def Padic'Int.heightOneIdeal : HeightOneSpectrum (zP p)
    where
  asIdeal := LocalRing.maximalIdeal (zP p)
  IsPrime := Ideal.IsMaximal.isPrime (LocalRing.maximalIdeal.isMaximal _)
  ne_bot := by
    simpa [Ne.def, ← LocalRing.isField_iff_maximalIdeal_eq] using DiscreteValuation.not_isField _

theorem Padic'Int.heightOneIdeal_is_principal :
    (Padic'Int.heightOneIdeal p).asIdeal = Ideal.span {(p : Z_p p)} :=
  DiscreteValuation.isUniformizer_is_generator _ (Padic'.valuation_p p)

instance : Valued (QP p) ℤₘ₀ :=
  HeightOneSpectrum.valuedAdicCompletion ℚ (pHeightOneIdeal p)

/-- The ring `ℤ_[p]` as a valuation subring of `ℚ_[p]`. -/
def PadicInt.valuationSubring : ValuationSubring ℚ_[p]
    where
  toSubring := PadicInt.subring p
  mem_or_inv_mem' :=
    by
    have not_field : ¬IsField ℤ_[p] := DiscreteValuationRing.not_isField _
    -- Marking `not_field` as a separate assumption makes the computation faster
    have := ((DiscreteValuationRing.TFAE ℤ_[p] not_field).out 0 1).mp PadicInt.discreteValuationRing
    intro x
    rcases(ValuationRing.iff_isInteger_or_isInteger ℤ_[p] ℚ_[p]).mp this x with (hx | hx)
    · apply Or.intro_left
      obtain ⟨y, hy⟩ := hx
      rw [← hy]
      simp only [PadicInt.algebraMap_apply, Subring.mem_carrier, PadicInt.mem_subring_iff,
        PadicInt.padic_norm_e_of_padicInt]
      apply PadicInt.norm_le_one
    · apply Or.intro_right
      obtain ⟨y, hy⟩ := hx
      rw [← hy]
      simp only [PadicInt.algebraMap_apply, Subring.mem_carrier, PadicInt.mem_subring_iff,
        PadicInt.padic_norm_e_of_padicInt]
      apply PadicInt.norm_le_one

open Filter

open scoped Filter Topology

/-- The valuation subring of `ℚ_[p]` that is the image via the isomorphism `padic_equiv` of `Z_p`-/
@[reducible]
def comapZp : ValuationSubring ℚ_[p] :=
  ValuationSubring.comap (zP p) (padicEquiv p).symm.toRingHom

/-- The two lemmas `padic_int.nonunit_mem_iff_top_nilpotent` and
`unit_ball.nonunit_mem_iff_top_nilpotent` have basically the same proof, except that in the first we
 use that `x : ℚ_[p]` satisfies ‖ x ‖ < 1 iff `p ∣ x` and in the other that `x : (Q_p p)` satisfies
 `‖ x ‖ < 1` iff it belongs to the maximal ideal. -/
theorem PadicInt.nonunit_mem_iff_top_nilpotent (x : ℚ_[p]) :
    x ∈ (PadicInt.valuationSubring p).nonunits ↔ Filter.Tendsto (fun n : ℕ => x ^ n) atTop (𝓝 0) :=
  by
  have aux : ∀ n : ℕ, ‖x ^ n‖ = ‖x‖ ^ n := fun n => norm_pow _ n
  rw [tendsto_zero_iff_norm_tendsto_zero, Filter.tendsto_congr aux]
  refine' ⟨fun H => _, fun H => _⟩
  · obtain ⟨h1, h2⟩ := valuation_subring.mem_nonunits_iff_exists_mem_maximal_ideal.mp H
    exact
      _root_.tendsto_pow_at_top_nhds_0_of_lt_1 (norm_nonneg _)
        (padic_int.mem_nonunits.mp <| (LocalRing.mem_maximalIdeal _).mp h2)
  · have : ‖x‖ < 1 :=
      by
      suffices (⟨‖x‖, norm_nonneg _⟩ : ℝ≥0) < 1 by
        rwa [← NNReal.coe_lt_coe, NNReal.coe_one, ← Subtype.val_eq_coe] at this
      apply NNReal.lt_one_of_tendsto_pow_0
      rwa [← NNReal.tendsto_coe, NNReal.coe_zero]
    apply valuation_subring.mem_nonunits_iff_exists_mem_maximal_ideal.mpr
    exact
      ⟨(PadicInt.mem_subring_iff p).mpr (le_of_lt this),
        (LocalRing.mem_maximalIdeal _).mpr (padic_int.mem_nonunits.mpr this)⟩

@[nolint unused_arguments]
theorem mem_unit_ball_of_tendsto_zero {x : QP p} (H : Tendsto (fun n : ℕ => ‖x‖ ^ n) atTop (𝓝 0))
    (h_go : ‖x‖ < 1) : x ∈ (zP p).nonunits :=
  by
  apply valuation_subring.mem_nonunits_iff_exists_mem_maximal_ideal.mpr
  have : ‖x‖ < 1 :=
    by
    suffices (⟨‖x‖, norm_nonneg _⟩ : ℝ≥0) < 1 by
      rwa [← NNReal.coe_lt_coe, NNReal.coe_one, ← Subtype.val_eq_coe] at this
    apply NNReal.lt_one_of_tendsto_pow_0
    rw [← NNReal.tendsto_coe, NNReal.coe_zero]
    exact H
  replace this : Valued.v x < (1 : ℤₘ₀)
  · apply (RankOneValuation.norm_lt_one_iff_val_lt_one x).mp this
  obtain ⟨y, hy₁, hy₂⟩ := exists_mem_lt_one_of_lt_one p this
  rw [← hy₂] at this
  rw [← hy₁]
  simp only [mem_valuation_subring_iff, SetLike.eta, exists_prop]
  refine' ⟨le_of_lt this, _⟩
  rw [← completion.adic_of_compl_eq_compl_of_adic ℤ (p_height_one_ideal p) ℚ ↑y] at this
  let M := completion.max_ideal_of_completion ℤ (p_height_one_ideal p) ℚ
  have v_lt_one :=
    @IsDedekindDomain.HeightOneSpectrum.valuation_lt_one_iff_dvd (Z_p p) _ _ _ (Q_p p) _ _ _
      (completion.max_ideal_of_completion ℤ (p_height_one_ideal p) ℚ) y
  have eq_y : (algebraMap (↥(Z_p p)) (Q_p p)) y = (↑y : Q_p p) := rfl
  rw [eq_y] at v_lt_one
  simp only [v_lt_one, Ideal.dvd_span_singleton, mem_nonunits_iff,
    ValuationSubring.algebraMap_apply, SetLike.coe_mk, forall_true_left] at this
  exact this

theorem UnitBall.nonunit_mem_iff_top_nilpotent (x : QP p) :
    x ∈ (zP p).nonunits ↔ Filter.Tendsto (fun n : ℕ => x ^ n) atTop (𝓝 0) :=
  by
  have h_max_ideal : (padic'_int.height_one_ideal p).asIdeal = LocalRing.maximalIdeal ↥(Z_p p) :=
    rfl
  have aux : ∀ n : ℕ, ‖x ^ n‖ = ‖x‖ ^ n := fun n => norm_pow _ n
  rw [tendsto_zero_iff_norm_tendsto_zero, Filter.tendsto_congr aux]
  refine' ⟨fun H => _, fun H => _⟩
  · simp_rw [norm_pow]
    obtain ⟨h, x_mem⟩ := valuation_subring.mem_nonunits_iff_exists_mem_maximal_ideal.mp H
    have :=
      (@valuation_lt_one_iff_dvd (Z_p p) _ _ _ (Q_p p) _ _ _ (padic'_int.height_one_ideal p)
          ⟨x, h⟩).mpr
    simp only [h_max_ideal, Ideal.dvd_span_singleton, mem_nonunits_iff,
      ValuationSubring.algebraMap_apply, SetLike.coe_mk, x_mem, forall_true_left] at this
    replace this : Valued.v x < (1 : ℤₘ₀)
    · convert this using 1
      exact (completion.adic_of_compl_eq_compl_of_adic ℤ (Int.pHeightOneIdeal p) ℚ x).symm
    exact
      _root_.tendsto_pow_at_top_nhds_0_of_lt_1 (norm_nonneg _)
        ((RankOneValuation.norm_lt_one_iff_val_lt_one _).mpr this)
  · have : ‖x‖ < 1 :=
      by
      suffices (⟨‖x‖, norm_nonneg _⟩ : ℝ≥0) < 1 by
        rwa [← NNReal.coe_lt_coe, NNReal.coe_one, ← Subtype.val_eq_coe] at this
      apply NNReal.lt_one_of_tendsto_pow_0
      rwa [← NNReal.tendsto_coe, NNReal.coe_zero]
    apply mem_unit_ball_of_tendsto_zero p H this

theorem mem_nonunits_iff (x : QP p) :
    x ∈ (zP p).nonunits ↔ (padicEquiv p) x ∈ (comapZp p).nonunits :=
  by
  let φ : Z_p p ≃+* comap_Zp p :=
    by
    have := (Z_p p).toSubring.comap_equiv_eq_map_symm (padic_equiv p).symm
    replace this := RingEquiv.subringCongr this.symm
    use(@RingEquiv.subringMap _ _ _ _ (Z_p p).toSubring (padic_equiv p)).trans this
  refine' ⟨fun hx => _, fun hx => _⟩
  all_goals
    rw [ValuationSubring.mem_nonunits_iff_exists_mem_maximalIdeal] at hx
    rw [ValuationSubring.mem_nonunits_iff_exists_mem_maximalIdeal]
  · refine' ⟨_, map_nonunit (↑φ : Z_p p →+* comap_Zp p) _ hx.some_spec⟩
  · rcases hx with ⟨h1, h2⟩
    have h3 := valuation_subring.mem_comap.mp h1
    have :
      (padic_equiv p).symm.toRingHom ((padic_equiv p) x) =
        (padic_equiv p).symm.toRingHom ((padic_equiv p).toRingHom x) :=
      rfl
    simp_rw [this, ← RingHom.comp_apply, RingEquiv.symm_toRingHom_comp_toRingHom,
      RingHom.id_apply] at h3
    have h4 : φ.symm (⟨(padic_equiv p) x, h1⟩ : { z // z ∈ comap_Zp p }) = ⟨x, h3⟩ :=
      by
      set b : ℚ_[p] := φ ⟨x, h3⟩ with hb
      have : b = (padic_equiv p) x := rfl
      simp_rw [← this, hb, SetLike.eta, RingEquiv.symm_apply_apply]
    replace h2 := map_nonunit (↑φ.symm : comap_Zp p →+* Z_p p) _ h2
    erw [h4] at h2
    refine' ⟨_, h2⟩

theorem valuation_subrings_eq : PadicInt.valuationSubring p = comapZp p :=
  by
  rw [← ValuationSubring.nonunits_inj]
  ext x
  refine' ⟨fun hx => _, fun hx => _⟩
  · rw [← (padic_equiv p).apply_symm_apply x]
    rw [← mem_nonunits_iff, unit_ball.nonunit_mem_iff_top_nilpotent, ←
      _root_.map_zero (padic_equiv p).symm]
    simp_rw [← _root_.map_pow (padic_equiv p).symm]
    apply (@Continuous.continuousAt _ _ _ _ _ 0 (compare p).3.Continuous).Tendsto.comp
    rwa [← padic_int.nonunit_mem_iff_top_nilpotent]
  · rw [← (padic_equiv p).apply_symm_apply x, ← mem_nonunits_iff,
      unit_ball.nonunit_mem_iff_top_nilpotent] at hx
    replace hx :=
      @tendsto.comp ℕ (Q_p p) ℚ_[p] (fun n => (padic_equiv p).symm x ^ n) (padic_equiv p) at_top
        (𝓝 0) (𝓝 0) _ hx
    -- We postpone the verification of the first assumption in `tendsto.comp`
    · simp_rw [← _root_.map_pow (padic_equiv p).symm x, Function.comp,
        RingEquiv.apply_symm_apply] at hx
      rwa [padic_int.nonunit_mem_iff_top_nilpotent]
    · rw [← _root_.map_zero (padic_equiv p)]
      apply Continuous.tendsto (compare p).symm.3.Continuous 0

theorem padic_int_ring_equiv_range : (zP p).map (padicEquiv p).toRingHom = PadicInt.subring p :=
  by
  have : (comap_Zp p).toSubring = (padic_int.valuation_subring p).toSubring
  rw [← valuation_subrings_eq]
  convert this
  ext x
  simp only [Subring.mem_carrier, Subring.mem_map, mem_valuation_subring_iff, exists_prop,
    ValuationSubring.mem_comap]
  constructor
  · rintro ⟨y, ⟨hy, H⟩⟩
    rw [← H]
    simp only [ValuationSubring.mem_toSubring, ValuationSubring.mem_comap,
      RingEquiv.symm_toRingHom_apply_toRingHom_apply, mem_valuation_subring_iff] at hy ⊢
    exact hy
  · intro hx
    simp at hx
    use(padic_equiv p).symm.toRingHom x
    constructor
    · simp only [ValuationSubring.mem_toSubring, mem_valuation_subring_iff]
      exact hx
    simp only [RingEquiv.toRingHom_apply_symm_toRingHom_apply]

/-- The ring equivalence between `Z_p p` and `ℤ_[p]`. -/
noncomputable def padicIntRingEquiv : zP p ≃+* ℤ_[p] :=
  (RingEquiv.subringMap _).trans (RingEquiv.subringCongr (padic_int_ring_equiv_range p))

/-- The ring equivalence between the residue field of `Z_p p` and `ℤ/pℤ`. -/
def residueField : LocalRing.ResidueField (zP p) ≃+* ZMod p :=
  (LocalRing.ResidueField.mapEquiv (padicIntRingEquiv p)).trans (PadicInt.residueField p)

end ZP

end PadicComparison
